// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: primary/primary.proto

package primary

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PrimaryClient is the client API for Primary service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PrimaryClient interface {
	GetRectangle(ctx context.Context, in *RectangleLocationRequest, opts ...grpc.CallOption) (*RectangleLocationResponse, error)
}

type primaryClient struct {
	cc grpc.ClientConnInterface
}

func NewPrimaryClient(cc grpc.ClientConnInterface) PrimaryClient {
	return &primaryClient{cc}
}

func (c *primaryClient) GetRectangle(ctx context.Context, in *RectangleLocationRequest, opts ...grpc.CallOption) (*RectangleLocationResponse, error) {
	out := new(RectangleLocationResponse)
	err := c.cc.Invoke(ctx, "/primary.Primary/GetRectangle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PrimaryServer is the server API for Primary service.
// All implementations must embed UnimplementedPrimaryServer
// for forward compatibility
type PrimaryServer interface {
	GetRectangle(context.Context, *RectangleLocationRequest) (*RectangleLocationResponse, error)
	mustEmbedUnimplementedPrimaryServer()
}

// UnimplementedPrimaryServer must be embedded to have forward compatible implementations.
type UnimplementedPrimaryServer struct {
}

func (UnimplementedPrimaryServer) GetRectangle(context.Context, *RectangleLocationRequest) (*RectangleLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRectangle not implemented")
}
func (UnimplementedPrimaryServer) mustEmbedUnimplementedPrimaryServer() {}

// UnsafePrimaryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PrimaryServer will
// result in compilation errors.
type UnsafePrimaryServer interface {
	mustEmbedUnimplementedPrimaryServer()
}

func RegisterPrimaryServer(s grpc.ServiceRegistrar, srv PrimaryServer) {
	s.RegisterService(&Primary_ServiceDesc, srv)
}

func _Primary_GetRectangle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RectangleLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrimaryServer).GetRectangle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/primary.Primary/GetRectangle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrimaryServer).GetRectangle(ctx, req.(*RectangleLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Primary_ServiceDesc is the grpc.ServiceDesc for Primary service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Primary_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "primary.Primary",
	HandlerType: (*PrimaryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRectangle",
			Handler:    _Primary_GetRectangle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "primary/primary.proto",
}
